from api.models import *
from django.http import JsonResponse
import datetime
import datetime as dt
from django.db.models import Sum
from operator import itemgetter
from dateutil.relativedelta import relativedelta
from collections import OrderedDict

def generate_dates(project, center, required_dates):
	"""
		It generates the dates from the last uploaded sheet date for that project to past 30 days, 60 days and 90 days.
	"""

	days_lists = [list(), list(), list()]

	# Getting latest sheet uploded date for requsted project and center
	latest_date = RawTable.objects.filter(project=project, center=center).latest('date').date

	# Calculating the dates from the latest sheet uploded date  to last 30 days, 60 days, 90 days.
	for index, date in enumerate(required_dates):
		for day in range(0, date):
			days_lists[index].append((latest_date - dt.timedelta(day)).strftime('%Y-%m-%d'))
	return days_lists

def dates_data(project, center):

	"""
		It returns the dates_data taken from the generate_dates method and split the dates on basis months(1, 2, 3) wise.
	"""

	days_list = generate_dates(project, center, [30, 60, 90])
	thirty_days_list =days_list[0]
	sixty_days_list =days_list[1]
	ninty_days_list = days_list[2]
	dates_list = [thirty_days_list, sixty_days_list, ninty_days_list]
	return dates_list

def final_result(data, final_dict, type_data):
	"""
		It takes two inputs, one is, data generated by the static data calculation methods another, an empty dictinory
		which is used to store the data after taking the five top data members from the actual data and returns the final dictinory object. 
	"""

	final_dict['result'] = OrderedDict()
	months_names = [('thirty_days_data', 0, 1), ('sixty_days_data', 2, 3), ('ninty_days_data', 4, 5)]

	if (type_data is not 'packet_accuracy') and (type_data is not 'agent_accuracy'):
		for month in months_names:
			final_dict['result'][month[0]] = OrderedDict()
			final_dict['result'][month[0]]['internalerrors'] = OrderedDict(sorted(data[month[1]].items(), key=itemgetter(1), reverse=True)[:5])
			final_dict['result'][month[0]]['externalerrors'] = OrderedDict(sorted(data[month[2]].items(), key=itemgetter(1), reverse=True)[:5])
	else:
		for month in months_names:
			final_dict['result'][month[0]] = OrderedDict()
			final_dict['result'][month[0]]['internalerrors'] = OrderedDict(sorted(data[month[1]].items(), key=itemgetter(1))[:5])
			final_dict['result'][month[0]]['externalerrors'] = OrderedDict(sorted(data[month[2]].items(), key=itemgetter(1))[:5])
	return final_dict

def	get_internal_external_agent_error_data(project, center, thirty_days, sixty_days, ninty_days):

	"""
		It returns the top 5 agent errors from the internal and external tables
	"""

	final_dict = {}
	dates_list = [thirty_days, sixty_days, ninty_days]
	tables= [Internalerrors, Externalerrors]
	agents_error_data = [{}, {}, {}, {}, {}, {}]

	pro_id = project
	center_id = center
	i = 0

	for date_list in dates_list:
		for table in tables:
			employees_list = table.objects.filter(project=pro_id, center=center_id, date__range=(date_list[-1], date_list[0])).filter(total_errors__gt=0).values_list('employee_id', flat=True).distinct()
			employees_error_data = {}
			for employee in employees_list:
				employees_error_data[employee] = table.objects.filter(project=pro_id, center=center_id, date__range=(date_list[-1], date_list[0]), employee_id=employee).aggregate(Sum('total_errors'))['total_errors__sum']
			agents_error_data[i] = employees_error_data
			i+=1

	final_dict = final_result(agents_error_data, final_dict, 'agents_error_data')

	return final_dict


def get_internal_external_error_category_data(project, center, thirty_days, sixty_days, ninty_days):
	"""
		It returns the top 5 error categories which scores max number in the internal and external tables
	"""
	final_dict = {}
	project = project
	center = center
	errors_category_data = [{}, {}, {}, {}, {}, {}]
	dates_list = [thirty_days, sixty_days, ninty_days]
	tables = [Internalerrors, Externalerrors]

	i=0
	for date_list in dates_list:
		for table in tables:
			error_types =table.objects.filter(project=project, center=center, date__range = (date_list[-1], date_list[0])).filter(error_values__gt=0).exclude(error_types='no_data').values('error_types', 'error_values')
			for error_data in error_types:
				errors = error_data['error_types'].split('#<>#')
				values = error_data['error_values'].split('#<>#')
				for error,value in zip(errors, values):
					if error in errors_category_data[i]:
						errors_category_data[i][error]+=int(value)
					else:
						errors_category_data[i][error] = int(value)
			i+=1

	final_dict = final_result(errors_category_data, final_dict, 'errors_category_data')

	return final_dict


def get_internal_external_packet_errors(project, center, thirty_days, sixty_days, ninty_days):
	"""
		It returns the top 5 work packets which have max error count in the internal and external errors table 
	"""

	final_dict = {}
	project=project
	center = center
	dates_list = [thirty_days, sixty_days, ninty_days]
	tables = [Internalerrors, Externalerrors]
	packet_wise_error=[{}, {}, {}, {}, {}, {}]
	i=0

	for date_list in dates_list:
	  for table in tables:
	    packets = table.objects.filter(project=project, center=center, date__range=(date_list[-1], date_list[0])).values_list('work_packet', flat=True).distinct()
	    for item in packets:
	      total_error = table.objects.filter(project=project, center=center, date__range=(date_list[-1], date_list[0]), work_packet=item).aggregate(Sum('total_errors'))['total_errors__sum']
	      packet_wise_error[i][item] = total_error
	    i+=1

	final_dict = final_result(packet_wise_error, final_dict, 'packet_wise_error')

	return final_dict

def get_internal_external_packet_accuracy(project, center, thirty_days, sixty_days, ninty_days):
	"""
		It returns the top 5 accuracies calculated from the internal and external errors tables
	"""
	final_dict = {}
	tables = [Internalerrors, Externalerrors]
	dates_list = [thirty_days, sixty_days, ninty_days]
	packet_accuracy = [{}, {}, {}, {}, {}, {}]
	i = 0

	for date_list in dates_list:
		for table in tables:
			packets = table.objects.filter(project=project, center=center, date__range=(date_list[-1], date_list[0])).values_list('work_packet', flat=True).distinct()
			for packet in packets:
				objs = table.objects.filter(project=project, center=center, date__range=(date_list[-1], date_list[0]), work_packet=packet)
				total_errors = objs.aggregate(Sum('total_errors'))['total_errors__sum']
				audited_errors = objs.aggregate(Sum('audited_errors'))['audited_errors__sum']
				if (audited_errors != 0) and (audited_errors is not None) and (total_errors is not None):
					accuracy = round(100 -(float(total_errors)/ float(audited_errors)*100), 2)
				else:
					# If the accuracy is 0 from the errors table work_done packet is taken from the raw table
					work_done = RawTable.objects.filter(project=project, center=center, date__range=(date_list[-1], date_list[0]), work_packet=packet, per_day__gt=0)
					total_work_done = work_done.aggregate(Sum('per_day'))['per_day__sum']
					accuracy = round(100 -(float(total_errors)/ float(total_work_done)*100), 2) if ((total_work_done != 0) and (total_work_done is not None) and (total_errors is not None)) else 0

				if accuracy != 0.0:
					packet_accuracy[i][packet] = accuracy
			
			i+=1

	final_dict = final_result(packet_accuracy, final_dict, 'packet_accuracy')

	return final_dict

def get_internal_external_agent_accuracy(project, center, thirty_days, sixty_days, ninty_days):
	project = project
	center = center
	final_dict = {}
	tables = [Internalerrors, Externalerrors]
	dates_list = [thirty_days, sixty_days, ninty_days]
	agent_accuracy = [{}, {}, {}, {}, {}, {}]

	i=0

	for date_list in dates_list:
		for table in tables:
			agents = table.objects.filter(project=project, center=center, date__range = (date_list[-1], date_list[0])).values_list('employee_id', flat=True).distinct()
			for agent in agents:
				data = table.objects.filter(project=project, center=center, date__range =(date_list[-1], date_list[0]), employee_id=agent)
				total_errors = data.aggregate(Sum('total_errors'))['total_errors__sum']
				audited_errors = data.aggregate(Sum('audited_errors'))['audited_errors__sum']
				if (audited_errors != 0) and (audited_errors is not None) and (total_errors is not None):
					accuracy = 100 -(float(total_errors)/ float(audited_errors))*100
					accuracy = round(accuracy, 2)
				else:
					work_done = RawTable.objects.filter(project=project, center=center, date__range=(date_list[-1], date_list[0]), employee_id=agent, per_day__gt=0)
					total_work_done = work_done.aggregate(Sum('per_day'))['per_day__sum']
					
					accuracy = 100 -(float(total_errors)/ float(total_work_done)) * 100 if ((total_work_done != 0) and (total_work_done is not None) and (total_errors is not None)) else 0.0
					accuracy = round(accuracy, 2)
				if accuracy != 0.0:
					agent_accuracy[i][agent] = accuracy
			i+=1

	final_dict = final_result(agent_accuracy, final_dict, 'agent_accuracy')

	return final_dict


def get_internal_external_unaudited_packets(project, center, thirty_days, sixty_days, ninty_days):
	project = project
	center = center
	final_dict = {}
	tables = [Internalerrors, Externalerrors]
	dates_list = [thirty_days, sixty_days, ninty_days]
	unaudited_packets = [{}, {}, {}, {}, {}, {}]

	i=0
	for date_list in dates_list:
		for table in tables:
			packets = RawTable.objects.filter(project=project, center=center, date__range=(date_list[-1], date_list[0])).values_list("work_packet", flat=True).distinct()
			for packet in packets:
				unaudited_packet = table.objects.filter(project=project, center=center, date__range=(date_list[-1], date_list[0]), work_packet=packet)
				if len(unaudited_packet) == 0:
					work_done = RawTable.objects.filter(project=project, center=center, date__range=(date_list[-1], date_list[0]), work_packet=packet).aggregate(Sum('per_day'))['per_day__sum']
					unaudited_packets[i][packet] = work_done
			i+=1
 
	final_dict = final_result(unaudited_packets, final_dict, 'unaudited_packets')
	return final_dict


def static_internal_external_agent_accuracy(request):
	project = request.GET.get('project', '')
	center = request.GET.get('center', '').split(' -')[0]

	pro_id = Project.objects.get(name=project).id
	center_id = Center.objects.get(name=center).id

	dates_list = dates_data(pro_id, center_id)

	result = get_internal_external_agent_accuracy(pro_id, center_id, dates_list[0], dates_list[1], dates_list[2])

	return JsonResponse(result)

def static_internal_external_packet_accuracy(request):

	project = request.GET.get('project', '')
	center = request.GET.get('center', '').split(' -')[0]

	pro_id = Project.objects.get(name=project).id
	center_id = Center.objects.get(name=center).id

	dates_list = dates_data(pro_id, center_id)

	result = get_internal_external_packet_accuracy(pro_id, center_id, dates_list[0], dates_list[1], dates_list[2])

	return JsonResponse(result)

def static_internal_external_packet_errors(request):

	project = request.GET.get('project', '')
	center = request.GET.get('center', '').split(' -')[0]

	pro_id = Project.objects.get(name=project).id
	center_id = Center.objects.get(name=center).id

	dates_list = dates_data(pro_id, center_id)

	result = get_internal_external_packet_errors(pro_id, center_id, dates_list[0], dates_list[1], dates_list[2])

	return JsonResponse(result)


def static_internal_external_agent_errors(request):

	project = request.GET.get('project', '')
	center = request.GET.get('center', '').split(' -')[0]

	pro_id = Project.objects.get(name=project).id
	center_id = Center.objects.get(name=center).id

	dates_list = dates_data(pro_id, center_id)
	result = get_internal_external_agent_error_data(pro_id, center_id, dates_list[0], dates_list[1], dates_list[2])

	return JsonResponse(result)

def static_internal_external_error_category(request):

	project = request.GET.get('project', '')
	center = request.GET.get('center', '').split(' -')[0]
	pro_id = Project.objects.get(name=project).id
	center_id = Center.objects.get(name=center).id
	dates_list = dates_data(pro_id, center_id)
	result = get_internal_external_error_category_data(pro_id, center_id, dates_list[0], dates_list[1], dates_list[2])
	return JsonResponse(result)

def static_internal_external_unaudited_packets(request):
	project = request.GET.get('project', '')
	center = request.GET.get('center', '').split(' -')[0]
	pro_id = Project.objects.get(name=project).id
	center_id = Center.objects.get(name=center).id
	dates_list = dates_data(pro_id, center_id)
	result = get_internal_external_unaudited_packets(pro_id, center_id, dates_list[0], dates_list[1], dates_list[2])
	return JsonResponse(result)